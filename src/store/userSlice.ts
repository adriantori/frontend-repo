// store/userSlice.ts

import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from './store';
import { User } from 'firebase/auth'; // Assuming you still have User type from Firebase

interface UserState {
  user: User | null;
  userData: any; // Define your user data structure here
  isAuthenticated: boolean;
}

const initialState: UserState = {
  user: null,
  userData: null, // Initial state for userData
  isAuthenticated: false,
};

const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    setUser(state, action: PayloadAction<User | null>) {
      state.user = action.payload;
      state.isAuthenticated = !!action.payload; // Set isAuthenticated based on user presence
    },
    setUserData(state, action: PayloadAction<any>) {
      state.userData = action.payload; // Update userData in the state
    },
    clearUserData(state) {
      state.userData = null; // Clear userData
    },
  },
});

// Export actions generated by createSlice
export const { setUser, setUserData, clearUserData } = userSlice.actions;

// Selectors to retrieve specific parts of the state
export const selectUser = (state: RootState) => state.user.user;
export const selectUserData = (state: RootState) => state.user.userData;
export const selectIsAuthenticated = (state: RootState) => state.user.isAuthenticated;

export default userSlice.reducer;
